syntax = "proto3";

import "google/protobuf/empty.proto";

package CARTAVIS;

// Because of the way python generates the required files,
// imports cannot easily be used using the model of
// plotmstool.py . So, if we are to use that model, all
// proto defs that would otherwise rely on imports have
// to be in monolithic files

// The greeting service definition.
service CartaBackend {
 
  // close the specified file
  rpc closeFile(CloseFile) returns (google.protobuf.Empty) {}

  // connect to existant session
  rpc connectToSession(ConnectToSession) returns (ConnectToSessionAck) {}

  // disconnect from session
  rpc disconnectFromSession(DisconnectFromSession) returns (google.protobuf.Empty) {}

  // Get rendered image as a base64 string that can be converted to PNG
  rpc getRenderedImage(GetRenderedImage) returns (GetRenderedImageAck) {}

  // open the specified file
  rpc openFile(OpenFile) returns (OpenFileAck) {}
  
  // request that the current view be saved as an image file, such as PNG,
  // on the front end machine
  rpc savePlot(SavePlot) returns (SavePlotAck) {}
 
  // set the specified image colormap
  rpc setColorMap(SetColorMap) returns (google.protobuf.Empty) {}

  // set the specified coordinate system
  rpc setCoordinateSystem(SetCoordinateSystem) returns (google.protobuf.Empty) {}

  // set the specified image channel/stokes
  rpc setImageChannels(SetImageChannels) returns (google.protobuf.Empty) {}

  // set the specified image view
  rpc setImageView(SetImageView) returns (google.protobuf.Empty) {}
   
  // show grid lines?
  rpc showGrid(ShowGrid) returns (google.protobuf.Empty) {}

  // set user preferences
  // rpc setUserLayout(SetUserLayout) returns (SetUserLayoutAck) {}
   
  // set user preferences
  // rpc setUserPreferences(SetUserPreferences) returns (SetUserPreferencesAck) {}
}

// MESSAGES

// CLOSE_FILE:
// Instructs the backend to close a file with a given file ID
message CloseFile {
    // Which "file" slot to close
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
}

// CONNECT_TO_SESSION:
// Requests a connection to a specific session.
// Responds with CONNECT_TO_SESSION_ACK
message ConnectToSession {
    // Active session ID
    fixed32 session_id = 1;
}

// DISCONNECT_FROM_SESSION:
// Notifies the server that the client is disconnecting
message DisconnectFromSession {
    // Active session ID
    fixed32 session_id = 1;
}

// CONNECT_TO_SESSION_ACK
// Acknowledgement response for CONNECT_TO_SESSION.
// Informs the client if the request was granted.
message ConnectToSessionAck {
    // Defines if the request was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
}

message GetRenderedImage {
    // The file ID of the view to retrieve
    sfixed32 file_id = 1;   
    sfixed32 session_id = 2;
}

message GetRenderedImageAck {
    // base64 encoded view
    string base64 = 1;
}

message ImageBounds {
    sfixed32 x_min = 1;
    sfixed32 x_max = 2;
    sfixed32 y_min = 3;
    sfixed32 y_max = 4;
}

// OPEN_FILE:
// Requests the opening of a specific file
// Backend responds with  OPEN_FILE_ACK
message OpenFile {
    // Required directory name
    string directory = 1;
    // Required file name
    string file = 2;
    // session ID to which to associate the open file
    sfixed32 session_id = 3;
    // Which HDU to load (if applicable). If left blank, the first HDU will be used
    string hdu = 4;
    // Which "file" slot to load the file into (when viewing multiple files)
    sfixed32 file_id = 5;
    // The render mode to use. Additional modes will be added in subsequent versions.
    RenderMode render_mode = 6;
}

// OPEN_FILE_ACK
// Response for OPEN_FILE. Also supplies file information
message OpenFileAck {
    // Defines whether OPEN_FILE was successful
    bool success = 1;
    // Which file slot the file was loaded into (when viewing multiple files)
    sfixed32 file_id = 2;
    // Error message (if applicable)
    string message = 3;
}

// Requests that a PNG etc file be saved on the front end machine
message SavePlot {
    // The file ID to save
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
}

message SavePlotAck {
    // Success of SAVE_FILE
    bool success = 1;
    // error message (if applicable)
    string message = 2;
    // the file name on the front end machine
    // to which the plot was saved
    string file_name = 3;
}

// Requests that the specified colormap be rendered
message SetColorMap {
    // The file ID to which the colormap corresponds
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
    // The colormap
    ColorMap colormap = 3;
}   

// SET_IMAGE_VIEW
// Sets the current image view position in image space coordinates
message SetImageView {
    // The file ID that the view corresponds to
    sfixed32 file_id = 1;
    // The XY bounds corresponding to the image data in pixel coordinates
    sfixed32 session_id = 2;
    ImageBounds image_bounds = 3;
}

// added by dmehring since I didn't see anything analogous in carta-protobuf
// Sets (or clears) the user layout
message SetUserLayout {
    // Name of the layout to update. If no layout with the given name is present
    // in the server database, a new layout is created
    string name = 1;
    // JSON string representing the layout. If the value is empty, the user
    // layout is cleared from the server database.
    string value = 2;
}

// SET_USER_LAYOUT_ACK
// added by dmehring since I didn't see anything analogous in carta-protobuf
// Acknowledgement response for SET_USER_LAYOUT.
message SetUserLayoutAck {
    // Defines whether the SET_USER_PREFERENCES_ACK command was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
}

// SET_USER_PREFERENCES
// added by dmehring since I didn't see anything analogous in carta-protobuf
// Sets the user preferences
message SetUserPreferences {
    // key-value map of the preferences
    map<string, string> preferences = 1;
}

// SET_USER_PREFERENCES_ACK
// added by dmehring since I didn't see anything analogous in carta-protobuf
// Acknowledgement response for SET_USER_PREFERENCES.
message SetUserPreferencesAck {
    // Defines whether the SET_USER_PREFERENCES_ACK command was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
}

// SET_IMAGE_CHANNELS
// Sets the current image channel and Stokes parameter
message SetImageChannels {
    // The file ID that the view corresponds to
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
    // The image channel (Z-coordinate)
    sfixed32 channel = 3;
    // The image stokes parameter
    sfixed32 stokes = 4;
}

// SHOW_GRID
// Requests to show grid lines or not.
message ShowGrid {
    // The file ID for the view
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
    // indicates if the grid should be displayed
    bool show_grid = 3;
}

message SetCoordinateSystem {
    // The file ID for the view
    sfixed32 file_id = 1;
    sfixed32 session_id = 2;
    // direction reference frame
    DirectionRefFrame direction_ref_frame = 3;
}

// ENUMS

enum ColorMap {
    AFMHOT = 0;
    BLUES = 1;
    COOLWARM = 2;
    CUBEHELIX = 3;
    GIST_HEAT = 4;
    GIST_STERN = 5;
    GNUPLOT = 6;
    GNUPLOT2 = 7;
    GRAY = 8;
    GREENS = 9;
    GREYS = 10;
    HOT = 11;
    INFERNO = 12;
    JET = 13;
    MAGMA = 14;
    NIPY_SPECTRAL = 15;
    PLASMA = 16;
    RAINBOW = 17;
    RDBU = 18;
    RDGY = 19;
    REDS = 20;
    SEISMIC = 21;
    SPECTRAL = 22;
    TAB10 = 23;
    VIRDIS = 24;
}

enum DirectionRefFrame {
    AUTO = 0;
    ECLIPTIC = 1;
    FK4 = 2;
    FK5 = 3;
    GALACTIC = 4;
    ICRS = 5;
}

enum RenderMode {
    RASTER = 0;
    CONTOUR = 1;
}

